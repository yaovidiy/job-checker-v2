generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  role          Role      @default(USER)
  is_verified   Boolean   @default(false)
  is_blocked    Boolean   @default(false)
  password_hash String?
  sessions      Session[]

  oauthAccount authProviders[]
  preferences  userPreferences[]
  userScore    userScore[]
  feeds        Feed[]
}

model userPreferences {
  id                  String   @id @default(uuid())
  userId              String
  djinniSessionCookie String
  douSessionCookie    String
  createdAt           DateTime @default(now())

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model userScore {
  id          String @id @default(uuid())
  userId      String
  score       Int
  searchValue String @unique

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model authProviders {
  id       String @id @default(uuid())
  userId   String
  provider String

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Feed {
  id               String     @id @default(uuid())
  userId           String
  feedUrl          String
  feedItems        FeedItem[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  totalItemsAmount Int?

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model ItemSource {
  id       String     @id @default(uuid())
  name     String     @unique
  FeedItem FeedItem[]
}

model Company {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  logo        String?
  website     String?
  douLink     String?
  sourceLink  String?
  feedItems   FeedItem[]
}

model ItemJobType {
  id       String     @id @default(uuid())
  name     String     @unique
  FeedItem FeedItem[]
}

model EnglishLevel {
  id       String     @id @default(uuid())
  name     String     @unique
  FeedItem FeedItem[]
}

model FeedItem {
  id               String    @id @default(uuid())
  feedId           String
  title            String
  link             String    @unique
  sourceId         String?
  companyId        String?
  jobTypeId        String?
  englishLevelId   String?
  shortDescription String?
  description      String?
  postDate         DateTime?
  pubSalaryMin     Int?
  pubSalaryMax     Int?
  reviewCount      Int?
  appliesCount     Int?
  isApplied        Boolean?
  location         String?
  experience       String?
  score            Int?

  feed         Feed          @relation(references: [id], fields: [feedId], onDelete: Cascade)
  source       ItemSource?   @relation(references: [id], fields: [sourceId], onDelete: SetNull)
  company      Company?      @relation(references: [id], fields: [companyId], onDelete: SetNull)
  jobType      ItemJobType?  @relation(references: [id], fields: [jobTypeId], onDelete: SetNull)
  englishLevel EnglishLevel? @relation(references: [id], fields: [englishLevelId], onDelete: SetNull)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}
